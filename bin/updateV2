#!/usr/bin/env -S nvim -l

local NIGHTLY_API = 'https://api.github.com/repos/neovim/neovim/releases/tags/nightly'
local ASSET = 'nvim-macos-arm64.tar.gz'
local TAR_BASE = 'https://github.com/neovim/neovim/releases/download/'
local DATA_HOME = vim.env.XDG_DATA_HOME or vim.fs.joinpath(vim.env.HOME, '.local', 'share')
local INSTALL_DIR = vim.fs.joinpath(DATA_HOME, 'nvim')
local LOCALBIN = vim.fs.joinpath(vim.env.HOME, '.local', 'bin')

vim.fn.mkdir(INSTALL_DIR, 'p')
vim.fn.mkdir(LOCALBIN, 'p')

-- current version
local res = vim.api.nvim_exec2('version', { output = true }).output or ''
local old_version = res:match('^NVIM v([^\n]+)') or 'unknown'

-- query GitHub nightly metadata
local curl = vim.system({ 'curl', '-fsSL', NIGHTLY_API }, { text = true }):wait()
if curl.code ~= 0 then
  error('Failed to query GitHub nightly.')
end
local nightly = vim.json.decode(curl.stdout)
local tag = nightly.tag_name or 'nightly'
local published = nightly.published_at or '?'
local URL = TAR_BASE .. tag .. '/' .. ASSET
local TARPATH = vim.fs.joinpath(vim.fn.stdpath('run'), ASSET)

-- skip if already nightly
if old_version:find('dev') or old_version:find('nightly') then
  print('Already on Neovim nightly (' .. old_version .. ')')
  os.exit(0)
end

print('ðŸ‘¾ Upgrading Neovim from ' .. old_version .. ' â†’ ' .. tag .. ' (' .. published .. ')')

local wget = require('nvim.util.wget')

wget(URL, {
  outpath = TARPATH,
  create_dirs = true,
  force = true,
})

local function run(cmd)
  print('â†’ ' .. table.concat(cmd, ' '))
  local result = vim.system(cmd, { text = true }):wait()
  if result.code ~= 0 then
    io.stderr:write('âœ— ' .. (result.stderr or 'error') .. '\n')
    error('Aborted.')
  end
  if result.stdout and result.stdout ~= '' then
    print(result.stdout)
  end
  print('âœ“ OK: ' .. table.concat(cmd, ' '))
  return result
end

run({ 'xattr', '-c', TARPATH })
run({ 'rm', '-rf', INSTALL_DIR .. '/bin', INSTALL_DIR .. '/lib', INSTALL_DIR .. '/share' })
run({ 'tar', '-xzf', TARPATH, '-C', INSTALL_DIR, '--strip-components=1' })
run({ 'ln', '-sfv', INSTALL_DIR .. '/bin/nvim', LOCALBIN .. '/nvim' })
run({ 'rm', '-f', TARPATH })

local result = run({ LOCALBIN .. '/nvim', '--version' })
local new_version = result.stdout:match('^NVIM v([^\n]+)') or 'unknown'
print('âœ… Neovim upgraded from ' .. old_version .. ' to ' .. new_version)
