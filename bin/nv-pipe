#!/usr/bin/env bash

NVIM_PIPE="${NVIM_PIPE:-${XDG_RUNTIME_DIR:-/tmp}/nvim.pipe}"
TMUX_PANE_NAME="${TMUX_PANE_NAME:-nvim_visual}"
NNN_SPLITSIZE="${NNN_SPLITSIZE:-80}"

usage() {
	cat << EOF
Usage: $0 [-f] [-t] [-d] [-H] [--] [nvim-flags] [file...]
  -f       force plain nvim (skip socket)
  -t       open in tmux split if no socket
  -d       delete socket pipe
  -H       show this help (use -h for nvim)
  --       end of options
EOF
	exit 0
}

resolve() {
	realpath "$1" 2> /dev/null \
		|| readlink -f "$1" 2> /dev/null \
		|| printf '%s/%s\n' "$PWD" "$1"
}

rm_pipe() {
	[[ -S $NVIM_PIPE ]] && rm -fv "$NVIM_PIPE"
}

run_nvim() {
	local args=("$@")
	if ((${#args[@]})); then
		exec nvim "${args[@]}"
	else
		exec nvim
	fi
}

main() {
	local skip_socket=false
	local tmux_split=false

	while getopts "ftdH" opt; do
		case $opt in
		f) skip_socket=true ;;
		t) tmux_split=true ;;
		d)
			rm_pipe
			exit 0
			;;
		H) usage ;;
		*) usage ;;
		esac
	done
	shift $((OPTIND - 1))

	[[ ${1:-} == "--" ]] && shift

	local args=()
	for a in "$@"; do
		if [[ $a == -* ]]; then
			args+=("$a")
		else
			args+=("$(resolve "$a")")
		fi
	done

	if ! "$skip_socket"; then
		if [[ -S $NVIM_PIPE ]]; then
			run_nvim --server "$NVIM_PIPE" --remote "${args[@]}"
		else
			run_nvim --listen "$NVIM_PIPE" "${args[@]}"
		fi
	fi

	[[ -n ${NVIM:-} ]] && exit 0

	if "$tmux_split" && [[ -n ${TMUX:-} ]]; then
		if ((${#args[@]})); then
			tmux split-window -h -p "$NNN_SPLITSIZE" "nvim ${args[*]}"
		else
			tmux split-window -h -p "$NNN_SPLITSIZE" nvim
		fi
		tmux select-pane -T "$TMUX_PANE_NAME"
		exit 0
	fi

	run_nvim "${args[@]}"
}

[[ ${BASH_SOURCE[0]} == "$0" ]] && main "$@"
