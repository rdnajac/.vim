#!/bin/bash
#######################################
## Vim plugin management using Git submodules
## Author:  Ryan D. Najac
## License: Public Domain
## URL: https://github.com/rdnajac/.vim
## Usage: vimfect <start|opt> <repository-url> [repository-url...]
#######################################

# Enforce strict error checking
set -euo pipefail

# Uncomment to enable debugging
#set -x

# Constants
readonly USAGE="Usage: $0 <start|opt> <repository-url> [repository-url...]"
readonly PACKPATH="${HOME}/.vim/pack"

#######################################
# Resolve the full repository URL.
# Globals: None
# Arguments: $1 - Repository name or URL
# Outputs: Writes full repository URL to stdout
# Returns: 0 on success
#######################################
resolve_repo_url() {
  local repo="$1"
  if [[ "$repo" =~ ^(https://|http://|git://|git@|ssh://git@) ]]; then
    printf '%s\n' "$repo"
  else
    printf 'https://github.com/%s.git\n' "$repo"
  fi
}

#######################################
# Manage Vim plugins using Git submodules.
# Globals: SCRIPT_DIR
# Arguments: $1 - Mode (start or opt)
#            $@ - Repository URLs
# Outputs: stdout, stderr
# Returns: 0 on success
#######################################
vimfect() {
  local mode="$1"
  shift
  for repo in "$@"; do
    local resolved_repo
    resolved_repo=$(resolve_repo_url "$repo")
    local repo_name
    repo_name=$(basename "$repo" .git)
    git submodule add --force "$resolved_repo" "$mode/$repo_name"
    git commit -m "vimfect: $resolved_repo"
  done
  git submodule sync
  git submodule update --init --recursive
}

#######################################
# Main function to run the script in a subshell
# Globals: None
# Arguments: None
# Outputs: Writes various messages to stdout and stderr
# Returns: 0 on success
#######################################
main() {
  (
    cd "$(dirname "$0")" && git rev-parse --is-inside-work-tree >/dev/null 2>&1
    [[ "$(dirname "$PWD")" == "$PACKPATH" ]] || { printf '\033[0;31m%s\033[0m\n' "I'm not supposed to be here!" >&2; exit 1; }

    # Ensure required directories exist
    mkdir -vp start opt

    # Parse command-line arguments
    case "${1:-}" in
      start|opt) mode="$1"; shift ;;
      p|purge) mode="purge"; shift ;;
      -h|--help|help|'') { printf '\033[0;31m%s\033[0m\n' "$USAGE" >&2; exit 1; } ;;
      *) mode="start" ;;
    esac

    vimfect "$mode" "$@"
  )
}

# Call the main function with all the script arguments

# if $1 is "purge" then $2 is the folder to remove and you have to also remove the submodule from .gitmodules and deinit?
if [[ "${1:-}" == "purge" ]]; then
  [[ -z "${2:-}" ]] && { printf '\033[0;31m%s\033[0m\n' "$USAGE" >&2; exit 1; }
  git submodule deinit --force "$2"
  git rm -r "$2"
  git commit -m "vimfect: removed $2"
else
  main "$@"
fi

# TODO: vim -u NONE -c "helptags eunuch/doc" -c q
# 
# TODO make shallow clines at depth 1
# like: git submodule add --depth 1 --force "$resolved_repo" "$mode/$repo_name"
