{
  "autocmd": {
    "prefix": "autocmd",
    "body": [
      "vim.api.nvim_create_autocmd({'${1:event}'}, {",
        "  pattern = { '${2:*}' },",
        "  group = aug,",
        "  callback = function()",
        "    ${0}",
        "  end,",
        "  desc = '${4}',",
        "})"
    ],
    "description": "autocmd"
  },

  "augroup": {
    "prefix": "augroup",
    "body": "local aug = vim.api.nvim_create_augroup('$0', { clear = true })",
    "description": "Create an augroup with clear = true"
  },

  "pr": {
    "prefix": "pr",
    "body": "print(vim.inspect(${0}))",
    "description": "print inspect"
  },

  "module": {
    "prefix": "local M",
    "body": [
      "local M = {}\n",
      "$0\n",
      "return M"
    ],
    "description": "Module skeleton"
  },

  "mfunc": {
    "prefix": "mfunc",
    "body": [
      "local ${TM_FILENAME_BASE} = {}\n",
      "function M.${TM_FILENAME_BASE}($1)",
      "  $0",
      "end\n",
      "return setmetatable(M, {\n  __call = ${TM_FILENAME_BASE}\n})"
    ],
    "description": "Module function skeleton with callable module and function"
  },

  "init": {
    "prefix": "init",
    "body": [
      "init = function()",
      "  ${0}",
      "end"
    ],
    "description": "lazy spec init"
  },

  "config": {
    "prefix": "config",
    "body": [
      "config = function()",
      "  ${0}",
      "end"
    ],
    "description": "lazy spec config"
  },

  "keys": {
    "prefix": "keys",
    "body": [
      "keys = {",
        "  { ${0} },",
        "},"
    ],
    "description": "lazy spec keys"
  },

  "require": {
    "prefix": "require",
    "body": ["require('${1:module}')"],
    "description": "Require module"
  },

  "return": {
    "prefix": "return",
    "body": ["return ${1:M}$0"],
    "description": "return value"
  },

  "assigment": {
    "prefix": "local",
    "body": ["local ${1:varName} = ${0:value}"],
    "description": "define a variable"
  },

  "locreq": {
    "prefix": "lreq",
    "body": ["local ${1:var} = require(${2:module})"],
    "description": "Require module as a variable"
  },

  "if": {
    "prefix": "if",
    "body": ["if ${1:true} then", "\t$0", "end"]
  },

  "elseif": {
    "prefix": "elseif",
    "body": ["elseif ${1:true} then", "\t$0"]
  },

  "for": {
    "prefix": "for",
    "body": ["for ${1:i}=${2:1},${3:10} do", "\t$0", "end"],
    "description": "for loop range"
  },

  "foreach": {
    "prefix": "foreach",
    "body": ["for i, ${1:x} in pairs(${2:table}) do", "\t$0", "end"]
  },

  "print": {
    "prefix": "print",
    "body": ["print(${0})"]
  },

  "dd": {
    "prefix": "dd",
    "body": ["dd(${0})"]
  },

  "while": {
    "prefix": "while",
    "body": ["while ${1:true} do", "\t$0", "end"]
  }
}
