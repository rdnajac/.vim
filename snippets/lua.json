{
  "M": {
    "body": "local M = {}\n\n$0\n\nreturn M",
    "description": "Module skeleton",
    "prefix": "local M"
  },
  "M.func": {
    "body": [
      "function M.${1}($2)",
      "  $0",
      "end\n"
    ],
    "description": "Module function",
    "prefix": "function M."
  },
  "assigment": {
    "body": [
      "local ${1:varName} = ${0:value}"
    ],
    "description": "define a variable",
    "prefix": "local"
  },
  "augroup": {
    "body": "local aug = vim.api.nvim_create_augroup('$0', {})",
    "description": "Create augroup",
    "prefix": "augroup"
  },
  "autocmd": {
    "body": [
      "vim.api.nvim_create_autocmd({'${1:event}'}, {",
        "  pattern = { '${2:*}' },",
        "  group = aug,",
        "  callback = function()",
        "    ${0}",
        "  end,",
        "  desc = '${4}',",
        "})"
    ],
    "description": "autocmd",
    "prefix": "autocmd"
  },
  "elseif": {
    "body": [
      "elseif ${1:true} then",
      "\t$0"
    ],
    "prefix": "elseif"
  },
  "for": {
    "body": " for ${1:_}, ${2:v} in ipairs($3) do\n$0\nend",
    "description": "for loop",
    "prefix": "for"
  },
  "if": {
    "body": [
      "if ${1:true} then",
      "\t$0",
      "end"
    ],
    "prefix": "if"
  },
  "keys": {
    "body": "vim.tbl_keys(${0})",
    "description": "vim.tbl_keys",
    "prefix": "keys"
  },
  "mfunc": {
    "body": [
      "local M = setmetatable({}, {",
        "  __call = function(M, ...)",
        "    return M.${TM_FILENAME_BASE}(...)",
        "  end,",
        "})",
        "",
        "function M.${TM_FILENAME_BASE}($1)",
        "  $0",
        "end\n",
        "return M"
    ],
    "description": "Module function skeleton with callable module and function",
    "prefix": "mfunc"
  },
  "pcall": {
    "body": "local ok, ${1:result} = pcall(${0})",
    "description": "pcall",
    "prefix": "pcall"
  },
  "pr": {
    "body": "print(vim.inspect(${0}))",
    "description": "print inspect",
    "prefix": "pr"
  },
  "print": {
    "body": [
      "print(${0})"
    ],
    "prefix": "print"
  },
  "return": {
    "body": [
      "return ${1:M}$0"
    ],
    "description": "return value",
    "prefix": "return"
  },
  "Current Win": {
    "prefix": "win",
    "body": "local win = vim.api.nvim_get_current_win()\n$0"
  },
  "Current Buf": {
    "prefix": "buf",
    "body": "local buf = vim.api.nvim_get_current_buf()\n$0"
  },
  "Buf Valid": {
    "prefix": "bufvalid",
    "body": "vim.api.nvim_buf_is_valid(${1:buf})"
  },
  "Win Valid": {
    "prefix": "winvalid",
    "body": "vim.api.nvim_win_is_valid(${1:win})"
  }
}
