---@alias buftype ''|'acwrite'|'help'|'nofile'|'nowrite'|'quickfix'|'terminal'|'prompt'

local M = {}

-- local stlescape = function(s) return s:gsub('%%', '%%%%'):gsub('\n', ' ') end
-- M.debug = function(str, opts) return vim.api.nvim_eval_statusline(str, opts) end

function M.render(a, b, c)
  -- stylua: ignore start
  local function hl(s) return '%#Chromatophore_' .. s .. '#' end
  local function sec(s, str) return hl(s) .. str end
  --stylua: ignore end
  local sep = nv.icons.separators.component.rounded.left
  local sec_a = a and sec('a', a) .. sec('ab', sep) or ''
  local sec_b = b and sec('b', b) .. sec('bc', sep) or ''
  return sec_a .. sec_b .. sec('c', c)
end

local path_from_ft = {
  help = '%h ' .. nv.icons.separators.section.angle.left .. ' %t',
  ['nvim-pack'] = vim.g.plug_home,
  oil = require('oil').get_current_dir,
  qf = '%q',
}

local pathfunc = function(active, bt, ft)
  local path
  if bt == '' then
    path = active and '%t' or '%f'
  elseif path_from_ft[ft] then
    path = nv.get(path_from_ft[ft])
  end
  if path and vim.startswith(path, '%') then
    return path
  end
  return vim.fn.fnamemodify(path or vim.fn.getcwd(), ':~')
end

---@param active boolean
---@param bt string
---@param ft string
local function buffer_components(active, bt, ft)
  return (' %s %s%s%s'):format(
    pathfunc(active, bt, ft),
    active and bt ~= 'nofile' and nv.icons.filetype[ft] or '',
    vim.bo.modified and ' ' or '',
    vim.bo.readonly and ' ' or ''
    -- TODO: add ff, fenc, etc
  )
end

M.winbar = function()
  local bt = vim.bo.buftype
  local ft = vim.bo.filetype
  local active = vim.api.nvim_get_current_win() == tonumber(vim.g.actual_curwin)
  local bufcomp = buffer_components(active, bt, ft)

  if not active or bt == 'nofile' then
    return M.render(nil, nil, bufcomp)
  end

  local a = bufcomp
  local b
  if bt == '' then
    b = nv.status()
  elseif bt == 'terminal' then
    b = nv.status.term()
  end
  local c = nv.status.diagnostic() ~= '' and nv.status.diagnostic() or nv.lsp.docsymbols()
  return M.render(a, b, c)
end

return setmetatable(M, {
  __call = function()
    return M.winbar()
  end,
})
